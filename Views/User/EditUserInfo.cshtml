@model CBTour.Models.UserVM

@if ((string)Session["Role"] != null)
{
    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.HiddenFor(model => model.ID)
            <h4>Edit Information</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @if ((string)Session["Role"] == "Mod" || (string)Session["Role"] == "Admin")
            {

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(model => model.Email)
            }
            @if ((string)Session["Role"] != "Admin")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.OldPass, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.PasswordFor(model => model.OldPass, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OldPass, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmPass, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.PasswordFor(model => model.ConfirmPass, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ConfirmPass, "", new { @class = "text-danger" })
                </div>
            </div>

            @if ((string)Session["Role"] == "Admin")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select name="Role">
                            <option value="User">User</option>
                            <option value="Mod">Mod</option>
                            <option value="Admin">Admin</option>
                        </select>
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(model => model.Role)
            }

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
    <div>
        @if ((string)Session["Role"] == "Mod")
        {
            @Html.ActionLink("Back", "ModIndex", new { Email = (string)Session["Email"] })
        }
        else if ((string)Session["Role"] == "Admin")
        {
            @Html.ActionLink("Back to List", "ViewAllUsers")
        }
        else if ((string)Session["Role"] == "User")
        {
            @Html.ActionLink("Back", "UserIndex")
        }
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
}
else
{
    <h1>Nice try...</h1>
}
